# this pulls in the dictionary generated by simple_crawler_modified.py
# and returns a doubly-linked ring of tnodes, one tnode for each unique url
# with pointer to starting url and fields for each tnode set to the default values

from fibheap import TreeNode
from simple_crawler import *
from prioqueue_helpers_wiki import *
from Queue import PriorityQueue

# just assume for now that you will be passed a dict
# returns a prioqueue
def from_dict_to_prioqueue_urlset(dict,starting_url) :
    prioq = PriorityQueue()
    urlset = set()
    #first key is going to be the start url -> initiate with 0 distance (key)
    is_start_url = True
    for key in dict:
        urlset.add(key.lower())
#        print "key is %s with #val_urls %d" % (key.lower(), len(dict[key]))
        if key.lower() == starting_url.lower() and is_start_url:
            key_tnode = TreeNode(0, key.lower())
            pq_push(prioq, key_tnode)
#            print "ADDRESS OF KEY IS %d" % id(key_tnode)
            is_start_url = False
        else:
            key_tnode = pq_member(prioq, key.lower())
            if key_tnode == None :
                key_tnode = TreeNode(float("inf"), key.lower())
                pq_push(prioq, key_tnode)
#            print "ADDRESS OF KEY IS %d" % id(key_tnode)
        # for each of the urls in its val, check if tnode already exists in circnode ring
        for val_url in dict[key]:
            urlset.add(val_url.lower())
#            print "\tval_url is " + val_url.lower()
            # if it doesn't exist, add the tnode
            val_tnode = pq_member(prioq, val_url.lower())
            if val_tnode == None :
#                print "\t\tnot member"
                val_tnode = TreeNode(float("inf"), val_url.lower())
                pq_push(prioq, val_tnode)
#            print "\t\tADDRESS OF VAL_URL IS %d" % id(val_tnode)
            key_tnode.neighbors.append(val_tnode)
#        print "\t#neighbors is %d" % len(key_tnode.neighbors)
    print "\tmin key: %g, url: %s" % (
        prioq.queue[0].key, prioq.queue[0].self_url)
    print "\tsize of prioqueue: %d" % prioq.qsize()
    print "\tsize of dict: %d" % len(dict)
    return prioq, urlset


def build_dict(filename) :
    print "beginning of build_dict; opening " + filename
    dictfile = open(filename, 'r')
    print "just opened " + dictfile.name
    print "mode is " + dictfile.mode
    curr_key = curr_val = ''
    dict = {}
    new_key = False
    if dictfile == None :
        print "Could not open file."
    else :
        dictfile.seek(0)

    print "Reading file '%s'...." % dictfile.name

    for line in dictfile :
        line = line.split(' ')
        if len(line) > 2 :
            print >> sys.stderr, "Error: whitespace in URL from file\n"
            exit(1)

        if line[0] == "key" :
            curr_key = line[1].rstrip('\n')
            new_key = True
        elif line[0] == "val" :
            curr_val = line[1].rstrip('\n')
        else :
            print >> sys.stderr, "Error: invalid line read from file\n"
            exit(1)

        if (curr_val != '') and (curr_key == '') :
            print >> sys.stderr, "Error: read value from file with no key\n"
            exit(1)

        if new_key :
            dict[curr_key] = []
        else :
            dict[curr_key].append(curr_val)

        new_key = False
        
    print "Reached end of file."
    
    dictfile.close()
    return dict
