# this pulls in the dictionary generated by simple_crawler_modified.py
# and returns a doubly-linked ring of tnodes, one tnode for each unique url
# with pointer to starting url and fields for each tnode set to the default values

from fibheap_yjp_20130429_wiki import TreeNode
from simple_crawler_modified_wiki import *
from helpers_wiki import *
from heapq import *

# just assume for now that you will be passed a dict
# returns a binheap
def from_dict_to_binheap_urlset(dict,starting_url) :
    bheap = []
    urlset = set()
    #first key is going to be the start url -> initiate with 0 distance (key)
    is_start_url = True
    for key in dict:
        urlset.add(key.lower())
#        print "key is %s with #val_urls %d" % (key.lower(), len(dict[key]))
        if key.lower() == starting_url.lower() and is_start_url:
            key_tnode = TreeNode(0, key.lower())
            heappush(bheap, key_tnode)
#            print "ADDRESS OF KEY IS %d" % id(key_tnode)
            is_start_url = False
        else:
            key_tnode = bh_member(bheap, key.lower())
            if key_tnode == None :
                key_tnode = TreeNode(float("inf"), key.lower())
                heappush(bheap, key_tnode)
#            print "ADDRESS OF KEY IS %d" % id(key_tnode)
        # for each of the urls in its val, check if tnode already exists in circnode ring
        for val_url in dict[key]:
            urlset.add(val_url.lower())
#            print "\tval_url is " + val_url.lower()
            # if it doesn't exist, add the tnode
            val_tnode = bh_member(bheap, val_url.lower())
            if val_tnode == None :
#                print "\t\tnot member"
                val_tnode = TreeNode(float("inf"), val_url.lower())
                heappush(bheap, val_tnode)
#            print "\t\tADDRESS OF VAL_URL IS %d" % id(val_tnode)
            key_tnode.neighbors.append(val_tnode)
#        print "\t#neighbors is %d" % len(key_tnode.neighbors)
#    print "min key: %g, url: %s" % (bheap[0].key, bheap[0].self_url)
    print "size of binheap: %d" % len(bheap)
    print "size of dict: %d" % len(dict)
    return bheap, urlset
